# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01-preprocessing.ipynb (unless otherwise specified).

__all__ = ['strip_text', 'replace_whitespace', 'whitespace_pattern', 'replace_URLs', 'url_pattern', 'replace_user',
           'user_pattern', 'is_wrong_selection']

# Cell
from fastai.text import *

# Cell
def strip_text(df, txt_col="text"): df[txt_col] = df[txt_col].apply(lambda s: s.strip())

# Cell
whitespace_pattern = re.compile(r"\s+")
def replace_whitespace(df, txt_col="text"):
    df[txt_col] = df[txt_col].apply(lambda s: whitespace_pattern.sub(" ", s).strip())

# Cell
url_pattern = re.compile("""(?:(?:https?|ftp):\/\/|\b(?:[a-z\d]+\.))(?:(?:[^\s()<>]+|\((?:[^\s()<>]+|(?:\([^\s()<>]+\)))?\))+(?:\((?:[^\s()<>]+|(?:\(?:[^\s()<>]+\)))?\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))?""")
def replace_URLs(df, txt_col="text", repl="URL"):
    df[txt_col] = df[txt_col].apply(lambda s: url_pattern.sub(repl, s))

# Cell
user_pattern = re.compile("(?<!\w)[@_]\w+")
def replace_user(df, txt_col="text", repl="USER"):
    df[txt_col] = df[txt_col].apply(lambda s: user_pattern.sub(repl, s))

# Cell
def is_wrong_selection(context, answer):
    "Get string start and end char for answer span"
    len_a = len(answer)
    for i, _ in enumerate(context):
        if context[i:i+len_a] == answer:
            return False
    return True